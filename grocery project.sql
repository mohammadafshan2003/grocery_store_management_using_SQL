


-- Grocery Store Management
DROP DATABASE IF EXISTS Grocery_Store_DB;

CREATE DATABASE Grocery_Store_DB;

USE Grocery_Store_DB;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

SELECT * FROM products;

SELECT cat_name, group_concat(prod_name) AS product_names
FROM categories c JOIN products p ON c.cat_id = p.cat_id
GROUP BY cat_name;


-- 1️. Customer Insights
-- Gain an understanding of customer engagement and purchasing behavior.

-- How many unique customers have placed orders?

SELECT 
    COUNT(DISTINCT cust_id) AS unique_customers
FROM
    orders;

SELECT 
    *
FROM
    orders;

SELECT 
    cust_id, COUNT(ord_id)
FROM
    orders
GROUP BY cust_id;

-- Which customers have placed the highest number of orders?

SELECT c.cust_name, COUNT(ord_id) AS orders_count
FROM customers c 
JOIN orders o ON c.cust_id = o.cust_id
GROUP BY c.cust_name
ORDER BY orders_count DESC
LIMIT 5;

-- What is the total and average purchase value per customer?

SELECT 
    c.cust_name,
    SUM(od.total_price) AS total_purchase_value,
    AVG(od.total_price) AS avg_purchase_value
FROM
    customers c
        JOIN
    orders o ON c.cust_id = o.cust_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_name
ORDER BY total_purchase_value DESC;

-- Who are the top 5 customers by total purchase amount?

SELECT c.cust_name, SUM(od.total_price) AS total_purchase_amount
FROM customers c 
JOIN orders o ON c.cust_id = o.cust_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_name 
ORDER BY total_purchase_amount DESC
LIMIT 5;


-- 2. Product Performance
-- Evaluate how well products are performing in terms of sales and revenue.

-- How many products exist in each category?

SELECT c.cat_name, COUNT(*) AS products_count, group_concat(p.prod_name)
FROM products p 
JOIN categories c ON p.cat_id = c.cat_id
GROUP BY c.cat_name
ORDER BY c.cat_name;


-- What is the average price of products by category?

SELECT c.cat_name, AVG(p.price) AS avg_price
FROM categories c
JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_name
ORDER BY c.cat_name;

-- Which products have the highest total sales volume (by quantity)? # Best sellers

SELECT prod_name, SUM(quantity) As total_quantity_sold  
FROM products p 
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY prod_name
ORDER BY total_quantity_sold DESC
LIMIT 5;

-- What is the total revenue generated by each product?

SELECT prod_name, SUM(total_price) AS total_revenue
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY prod_name
ORDER BY total_revenue DESC;

                                                                                      -- How do product sales vary by category and supplier?


    
    
SELECT 
    c.cat_name AS Category,
    s.sup_name AS Supplier,
    SUM(od.quantity) AS Total_Quantity_Sold,
    SUM(od.total_price) AS Total_Revenue
FROM 
    order_details od
JOIN 
    products p ON od.prod_id = p.prod_id
JOIN 
    categories c ON p.cat_id = c.cat_id
JOIN 
    supplier s ON p.sup_id = s.sup_id
GROUP BY 
    c.cat_name, s.sup_name
ORDER BY 
    Total_Revenue DESC;
    
    
--  3.Analyze business performance through orders and revenue over time.
--                                           A.How many orders have been placed in total?




SELECT  distinct COUNT(*) AS total_orders FROM orders;





--                                          B. What is the average value per order?


SELECT 
    o.ord_id AS Order_ID,
    AVG(od.total_price) AS Avg_Order_Value
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY o.ord_id
ORDER BY Avg_Order_Value DESC;


--                                          C. On which dates were the most orders placed?

SELECT 
    order_date, COUNT(ord_id) as orders_placed
FROM
    orders
GROUP BY order_date
ORDER BY COUNT(ord_id) DESC
LIMIT 5
;

SELECT order_date, dayname(STR_TO_DATE(order_date, '%m/%d/%Y')) AS day_name,
COUNT(*) AS order_count
FROM orders
GROUP BY order_date
ORDER BY order_count DESC limit 5;


                                          -- What are the monthly trends in order volume and revenue?


SELECT 
    MONTHNAME(STR_TO_DATE(o.order_date, '%m/%d/%Y')) AS month_name,
    COUNT(DISTINCT o.ord_id) AS total_orders_per_month,
    SUM(od.total_price) AS total_revenue_per_month
FROM
    orders o
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY month_name order by total_revenue_per_month desc;




-- How do order patterns vary across weekdays and weekends?


SELECT 
    CASE 
        WHEN WEEKDAY(STR_TO_DATE(order_date, '%m/%d/%Y')) < 5 THEN 'Weekday'
        ELSE 'Weekend'
    END AS week_category,
    COUNT(ord_id) AS total_orders
FROM orders
GROUP BY week_category
ORDER BY total_orders DESC;




-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.
--                                            A.How many suppliers are there in the database?


select count(*) as suppliers_count from supplier;

--                                            B.Which supplier provides the most products?
SELECT 
    s.sup_id,
    s.sup_name,
    COUNT(p.prod_id) product_count_per_supplier
FROM
    supplier s
        JOIN
    products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id , s.sup_name
ORDER BY product_count_per_supplier DESC
LIMIT 1;
--                                            C.What is the average price of products from each supplier?

SELECT 
    s.sup_id, s.sup_name, AVG(p.price) avg_price_per_supplier
FROM
    supplier s
        JOIN
    products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id , s.sup_name
ORDER BY avg_price_per_supplier;

SELECT 
    s.sup_id,
    s.sup_name,
    SUM(od.total_price) AS total_sales_by_revenue
FROM
    supplier s
        JOIN
    products p ON s.sup_id = p.sup_id
        JOIN
    order_details od ON p.prod_id = od.prod_id 
    group by  s.sup_id,
    s.sup_name order by total_sales_by_revenue desc;
    
    
SELECT 
    s.sup_name AS Supplier, SUM(od.total_price) AS Total_Revenue
FROM
    order_details od
        JOIN
    products p ON od.prod_id = p.prod_id
        JOIN
    supplier s ON p.sup_id = s.sup_id
GROUP BY s.sup_name
ORDER BY Total_Revenue DESC
LIMIT 5;

-- 5️. Employee Performance
-- Assess how employees are handling and influencing sales.
--                          A.How many employees have processed orders?
SELECT 
    COUNT(DISTINCT emp_id)
FROM
    orders;


-- Which employees have handled the most orders?

SELECT 
    e.emp_id, e.emp_name, COUNT(o.ord_id) AS order_count
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
GROUP BY e.emp_id , e.emp_name
ORDER BY order_count DESC;


-- What is the total sales value processed by each employee?

SELECT 
    e.emp_id, e.emp_name, SUM(total_price) AS total_sales_value
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id , e.emp_name
ORDER BY total_sales_value DESC;


                               -- What is the average order value handled per employee?
                               
SELECT 
    e.emp_id,
    e.emp_name,
    SUM(od.total_price) / COUNT(DISTINCT o.ord_id) AS avg_order_value
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id , e.emp_name
ORDER BY avg_order_value DESC;
    


-- 6️. Order Details Deep Dive

-- Explore item-level sales patterns and pricing behavior.

select prod_id,prod_name from products;

SELECT 
    p.prod_name AS Product,
    SUM(od.quantity) AS Total_Units_Sold,
    AVG(od.each_price) AS Avg_Selling_Price,
    SUM(od.total_price) AS Total_Revenue
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_name
ORDER BY Total_Revenue DESC
LIMIT 10;
-- What is the relationship between quantity ordered and total price?


SELECT DISTINCT
    quantity,
    SUM(total_price) AS total_price,
    MIN(total_price),
    MAX(total_price)
FROM
    order_details
GROUP BY quantity
ORDER BY SUM(total_price) DESC;



-- What is the average quantity ordered per product?

SELECT 
    p.prod_id,
    p.prod_name,
    ROUND(AVG(quantity)) AS avg_quantity_ordered
FROM
    products p
        JOIN
    order_details od ON p.prod_id = od.prod_id
GROUP BY prod_id , prod_name
ORDER BY avg_quantity_ordered DESC;


-- How does the unit price vary across products and orders?

SELECT 
    p.prod_name AS Product,
    od.each_price AS Unit_Price,
    COUNT(od.ord_id) AS Order_Count
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_name, od.each_price
ORDER BY p.prod_name DESC;

SELECT 
    p.prod_name AS Product,
    o.ord_id AS Order_ID,
    AVG(od.each_price) AS Avg_Unit_Price
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
JOIN orders o ON od.ord_id = o.ord_id
GROUP BY p.prod_name, o.ord_id
ORDER BY p.prod_name, Avg_Unit_Price DESC;


select count(ord_id) from orders;




